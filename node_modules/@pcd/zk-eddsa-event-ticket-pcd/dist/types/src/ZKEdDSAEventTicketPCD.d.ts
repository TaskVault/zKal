import type { EdDSAPublicKey } from "@pcd/eddsa-pcd";
import { EdDSATicketPCD, ITicketData } from "@pcd/eddsa-ticket-pcd";
import { BigIntArgument, PCD, PCDArgument, RevealListArgument, StringArrayArgument } from "@pcd/pcd-types";
import { SemaphoreIdentityPCD } from "@pcd/semaphore-identity-pcd";
import { Groth16Proof } from "snarkjs";
export declare const ZKEdDSAEventTicketPCDTypeName = "zk-eddsa-event-ticket-pcd";
/**
 * Specifies which fields of an EdDSATicket should be revealed in a proof.
 */
export type EdDSATicketFieldsToReveal = {
    revealTicketId?: boolean;
    revealEventId?: boolean;
    revealProductId?: boolean;
    revealTimestampConsumed?: boolean;
    revealTimestampSigned?: boolean;
    revealAttendeeSemaphoreId?: boolean;
    revealIsConsumed?: boolean;
    revealIsRevoked?: boolean;
    revealTicketCategory?: boolean;
    revealAttendeeEmail?: boolean;
    revealAttendeeName?: boolean;
};
/**
 * Info required to initialize this PCD package.  These are the artifacts
 * associated with the circom circuit.
 */
export interface ZKEdDSAEventTicketPCDInitArgs {
    zkeyFilePath: string;
    wasmFilePath: string;
}
/**
 * Max supported size of validEventIds field in ZKEdDSAEventTicketPCDArgs.
 */
export declare const VALID_EVENT_IDS_MAX_LEN = 20;
/**
 * Arguments to request a new proof.
 */
export type ZKEdDSAEventTicketPCDArgs = {
    ticket: PCDArgument<EdDSATicketPCD, {
        /**
         * used only in proof screen validation
         *
         * dev should implement additional constraints either in the proof level (e.g. validEventIds)
         * or in the app level (e.g. check revealed eventId or productId)
         *
         * If both `eventIds` and `productIds` are provided, they must be of the same length and
         * they will be checked as pairs. Pass empty array to skip the check.
         */
        eventIds: string[];
        productIds: string[];
        publicKeys?: EdDSAPublicKey[];
        notFoundMessage: string;
    }>;
    identity: PCDArgument<SemaphoreIdentityPCD>;
    validEventIds: StringArrayArgument;
    fieldsToReveal: RevealListArgument<EdDSATicketFieldsToReveal>;
    watermark: BigIntArgument;
    externalNullifier: BigIntArgument;
};
/**
 * Claim part of a ZKEdDSAEventTicketPCD contains all public/revealed fields.
 */
export interface ZKEdDSAEventTicketPCDClaim {
    partialTicket: Partial<ITicketData>;
    watermark: string;
    signer: EdDSAPublicKey;
    validEventIds?: string[];
    externalNullifier?: string;
    nullifierHash?: string;
}
/**
 * ZKEdDSAEventTicketPCD PCD type representation.
 */
export declare class ZKEdDSAEventTicketPCD implements PCD<ZKEdDSAEventTicketPCDClaim, Groth16Proof> {
    readonly id: string;
    readonly claim: ZKEdDSAEventTicketPCDClaim;
    readonly proof: Groth16Proof;
    type: string;
    constructor(id: string, claim: ZKEdDSAEventTicketPCDClaim, proof: Groth16Proof);
}
//# sourceMappingURL=ZKEdDSAEventTicketPCD.d.ts.map