import { DisplayOptions, PCD, PCDPackage, ProveDisplayOptions, SerializedPCD } from "@pcd/pcd-types";
import { Groth16Proof } from "snarkjs";
import { ZKEdDSAEventTicketPCD, ZKEdDSAEventTicketPCDArgs, ZKEdDSAEventTicketPCDClaim, ZKEdDSAEventTicketPCDInitArgs } from "./ZKEdDSAEventTicketPCD";
export declare const STATIC_TICKET_PCD_NULLIFIER: bigint;
/**
 * Initialize ZKEdDSAEventTicketPCDPackage.
 */
export declare function init(args: ZKEdDSAEventTicketPCDInitArgs): Promise<void>;
/**
 * Convert a list of valid event IDs from input format (variable-length list
 * of UUID strings) to snark signal format (fixed-length list of bigint
 * strings).  The result always has length VALID_EVENT_IDS_MAX_LEN with
 * unused fields are filled in with a value of BABY_JUB_NEGATIVE_ONE.
 */
export declare function snarkInputForValidEventIds(validEventIds?: string[]): string[];
export declare function getProveDisplayOptions(): ProveDisplayOptions<ZKEdDSAEventTicketPCDArgs>;
/**
 * Creates a new ZKEdDSAEventTicketPCD.
 */
export declare function prove(args: ZKEdDSAEventTicketPCDArgs): Promise<ZKEdDSAEventTicketPCD>;
/**
 * Verify the claims and proof of a ZKEdDSAEventTicketPCD.
 */
export declare function verify(pcd: ZKEdDSAEventTicketPCD): Promise<boolean>;
/**
 * Serialize a ZKEdDSAEventTicketPCD.
 */
export declare function serialize(pcd: ZKEdDSAEventTicketPCD): Promise<SerializedPCD<ZKEdDSAEventTicketPCD>>;
/**
 * Deserialize a ZKEdDSAEventTicketPCD.
 */
export declare function deserialize(serialized: string): Promise<ZKEdDSAEventTicketPCD>;
/**
 * Get display options for a ZKEdDSAEventTicketPCD.
 */
export declare function getDisplayOptions(pcd: ZKEdDSAEventTicketPCD): DisplayOptions;
export declare function isZKEdDSAEventTicketPCD(pcd: PCD): pcd is ZKEdDSAEventTicketPCD;
/**
 * A PCD representing a proof of ownership of an EdDSA-signed ticket. The prover
 * is able to prove ownership of a ticket corresponding to their semaphore
 * identity, and optionally prove the ticket corresponds to one of a list
 * of valid events. The prover can keep their identity private, and selectively
 * reveal some or none of the individual ticket fields. To harden against
 * various abuses, the proof can be watermarked, and can include a nullifier.
 */
export declare const ZKEdDSAEventTicketPCDPackage: PCDPackage<ZKEdDSAEventTicketPCDClaim, Groth16Proof, ZKEdDSAEventTicketPCDArgs, ZKEdDSAEventTicketPCDInitArgs>;
//# sourceMappingURL=ZKEdDSAEventTicketPCDPackage.d.ts.map