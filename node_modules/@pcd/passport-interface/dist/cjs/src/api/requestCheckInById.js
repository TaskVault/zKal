"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requestCheckInById = void 0;
const url_join_1 = __importDefault(require("url-join"));
const makeRequest_1 = require("./makeRequest");
/**
 * Tries to check the user in. This is called by the Zupass client when
 * a 'superuser' of a particular event wants to check in a Devconnect
 * attendee into the event.
 *
 * Sends the ticket ID. See {@link requestCheckIn} for an alternative
 * API which sends a serialized PCD.
 *
 * Never rejects. All information encoded in the resolved response.
 */
async function requestCheckInById(passportServerUrl, postBody) {
    return (0, makeRequest_1.httpPost)((0, url_join_1.default)(passportServerUrl, "/issue/check-in-by-id"), {
        // @todo - here and elsewhere - how can we do better than casting, and actually
        // make sure that the response we're getting back is the right shape?
        onValue: async (resText) => JSON.parse(resText),
        onError: async () => ({ error: { name: "ServerError" }, success: false })
    }, postBody);
}
exports.requestCheckInById = requestCheckInById;
