"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CredentialManager = exports.createStorageBackedCredentialCache = exports.createCredentialCache = exports.ZUPASS_CREDENTIAL_REQUEST = exports.PODBOX_CREDENTIAL_REQUEST = void 0;
const pcd_types_1 = require("@pcd/pcd-types");
const semaphore_identity_pcd_1 = require("@pcd/semaphore-identity-pcd");
const semaphore_signature_pcd_1 = require("@pcd/semaphore-signature-pcd");
const util_1 = require("@pcd/util");
const Credential_1 = require("./Credential");
const StorageBackedMap_1 = require("./util/StorageBackedMap");
const CACHE_TTL = util_1.ONE_HOUR_MS;
/**
 * These constants are convenient values for credential requests.
 * PODBOX_CREDENTIAL_REQUEST requires an EmailPCD, since this is commonly
 * required for Podbox requests.
 * ZUPASS_CREDENTIAL_REQUEST does not, as Zupass can identify users by their
 * Semaphore ID alone.
 */
exports.PODBOX_CREDENTIAL_REQUEST = {
    pcdType: "email-pcd",
    signatureType: "sempahore-signature-pcd"
};
exports.ZUPASS_CREDENTIAL_REQUEST = {
    signatureType: "sempahore-signature-pcd"
};
// Creates an in-memory cache with a TTL of one hour.
// Use this where local storage is not available, e.g. in tests
function createCredentialCache() {
    return new Map();
}
exports.createCredentialCache = createCredentialCache;
// Creates an in-memory cache with a TTL of one hour, backed by localStorage
function createStorageBackedCredentialCache() {
    return new StorageBackedMap_1.StorageBackedMap("credential-cache");
}
exports.createStorageBackedCredentialCache = createStorageBackedCredentialCache;
/**
 * Handles generation of credentials for feeds.
 */
class CredentialManager {
    constructor(identity, pcds, cache) {
        this.identity = identity;
        this.pcds = pcds;
        this.cache = cache;
    }
    // Can we get a credential containing a given PCD type?
    canGenerateCredential(req) {
        if (req.pcdType === "email-pcd") {
            return this.pcds.getPCDsByType(req.pcdType).length !== 0;
        }
        else if (req.pcdType === undefined) {
            return true;
        }
        else {
            // We can't generate credentials containing any other PCD type yet
            return false;
        }
    }
    /**
     * Before doing a parallel fetching of subscriptions, it can be helpful to
     * prepare the credentials to avoid race conditions.
     */
    async prepareCredentials(reqs) {
        for (const req of reqs) {
            if (!this.getCachedCredential(req.pcdType)) {
                try {
                    this.setCachedCredential(req, await this.generateCredential(req));
                }
                catch (e) {
                    // It can be possible for credential generation to fail if the user
                    // does not have the right kind of PCD. Because we are only
                    // pre-generating credentials here, we don't need to take any action
                    // if a single credential fails to generate.
                }
            }
        }
    }
    // Get a credential from the local cache, if it exists
    getCachedCredential(type) {
        const cacheKey = type ?? "none";
        const res = this.cache.get(cacheKey);
        if (res) {
            if (Date.now() - res.timestamp < CACHE_TTL) {
                return res.value;
            }
            else {
                this.cache.delete(cacheKey);
            }
        }
        return undefined;
    }
    // Adds a credential to the cache
    setCachedCredential(request, value) {
        const cacheKey = request.pcdType ?? "none";
        this.cache.set(cacheKey, { value, timestamp: Date.now(), request });
        // This can happen asynchronously, so don't await on the promise
        this.purgeExpiredCredentials();
    }
    // Purges expired items from the cache
    async purgeExpiredCredentials() {
        const keysToRemove = [];
        this.cache.forEach((v, k) => {
            if (Date.now() - v.timestamp >= CACHE_TTL) {
                keysToRemove.push(k);
            }
        });
        keysToRemove.forEach((key) => this.cache.delete(key));
    }
    /**
     * Returns a requested credential, either from the cache or by generating it.
     */
    async requestCredential(req) {
        const cachedCredential = this.getCachedCredential(req.pcdType);
        if (cachedCredential) {
            return cachedCredential;
        }
        const credential = await this.generateCredential(req);
        this.setCachedCredential(req, credential);
        return credential;
    }
    /**
     * Generates the requested credential, if possible.
     * Takes a {@link CredentialRequest} and produces a serialized PCD which
     * consists of a signature PCD (e.g. a semaphore signature PCD) which wraps
     * a {@link FeedCredentialPayload}. This payload contains a timestamp, and
     * may contain a PCD if a) the feed requests one and b) CredentialManager
     * can find a matching PCD.
     */
    async generateCredential(req) {
        if (req.pcdType === "email-pcd") {
            const pcds = this.pcds.getPCDsByType(req.pcdType);
            if (pcds.length === 0) {
                throw new Error(`Could not find a PCD of type ${req.pcdType} for credential payload`);
            }
            // In future we might want to support multiple email PCDs, but this
            // works for now
            const pcd = pcds[0];
            const serializedPCD = await this.pcds.serialize(pcd);
            return this.semaphoreSignPayload((0, Credential_1.createCredentialPayload)(serializedPCD));
        }
        else if (req.pcdType === undefined) {
            return this.semaphoreSignPayload((0, Credential_1.createCredentialPayload)());
        }
        else {
            throw new Error(`Cannot issue credential containing a PCD of type ${req.pcdType}`);
        }
    }
    // Takes a payload and wraps it in a signature PCD.
    async semaphoreSignPayload(payload) {
        // In future we might support other types of signature here
        const signaturePCD = await semaphore_signature_pcd_1.SemaphoreSignaturePCDPackage.prove({
            identity: {
                argumentType: pcd_types_1.ArgumentTypeName.PCD,
                value: await semaphore_identity_pcd_1.SemaphoreIdentityPCDPackage.serialize(await semaphore_identity_pcd_1.SemaphoreIdentityPCDPackage.prove({
                    identity: this.identity
                }))
            },
            signedMessage: {
                argumentType: pcd_types_1.ArgumentTypeName.String,
                value: JSON.stringify(payload)
            }
        });
        return await semaphore_signature_pcd_1.SemaphoreSignaturePCDPackage.serialize(signaturePCD);
    }
}
exports.CredentialManager = CredentialManager;
