"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SemaphoreIdentityPCDPackage = exports.getDisplayOptions = exports.deserialize = exports.serialize = exports.verify = exports.prove = void 0;
const util_1 = require("@pcd/util");
const identity_1 = require("@semaphore-protocol/identity");
const json_bigint_1 = __importDefault(require("json-bigint"));
const uuid_1 = require("uuid");
const SemaphoreIdentityPCD_1 = require("./SemaphoreIdentityPCD");
async function prove(args) {
    return new SemaphoreIdentityPCD_1.SemaphoreIdentityPCD((0, uuid_1.v4)(), { identity: args.identity });
}
exports.prove = prove;
async function verify(pcd) {
    return pcd?.claim?.identity !== undefined;
}
exports.verify = verify;
async function serialize(pcd) {
    return {
        type: SemaphoreIdentityPCD_1.SemaphoreIdentityPCDTypeName,
        pcd: json_bigint_1.default.stringify({
            type: pcd.type,
            id: pcd.id,
            identity: pcd.claim.identity.toString()
        })
    };
}
exports.serialize = serialize;
async function deserialize(serialized) {
    const { id, identity } = json_bigint_1.default.parse(serialized);
    (0, util_1.requireDefinedParameter)(id, "id");
    (0, util_1.requireDefinedParameter)(identity, "identity");
    return new SemaphoreIdentityPCD_1.SemaphoreIdentityPCD(id, {
        identity: new identity_1.Identity(identity)
    });
}
exports.deserialize = deserialize;
function getDisplayOptions(pcd) {
    return {
        header: "Semaphore Identity",
        displayName: "semaphore-id-" + pcd.claim.identity.commitment.toString().substring(0, 8)
    };
}
exports.getDisplayOptions = getDisplayOptions;
/**
 * PCD-conforming wrapper for the Semaphore zero-knowledge protocol. You can
 * find documentation of Semaphore here: https://semaphore.appliedzkp.org/docs/introduction
 */
exports.SemaphoreIdentityPCDPackage = {
    name: SemaphoreIdentityPCD_1.SemaphoreIdentityPCDTypeName,
    getDisplayOptions,
    prove,
    verify,
    serialize,
    deserialize
};
