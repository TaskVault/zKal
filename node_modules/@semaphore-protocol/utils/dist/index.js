/**
 * @module @semaphore-protocol/utils
 * @version 4.0.0-beta.11
 * @file A library to provide utility functions to the other Semaphore packages.
 * @copyright Ethereum Foundation 2024
 * @license MIT
 * @see [Github]{@link https://github.com/semaphore-protocol/semaphore/tree/main/packages/utils}
*/
import { decodeBytes32String } from 'ethers/abi';
import { toBeHex } from 'ethers/utils';

// Minimum supported tree depth.
const MIN_DEPTH = 1;
// Maximum supported tree depth.
const MAX_DEPTH = 32;

var constants = /*#__PURE__*/Object.freeze({
    __proto__: null,
    MAX_DEPTH: MAX_DEPTH,
    MIN_DEPTH: MIN_DEPTH
});

/**
 * Typically used for decoding on-chain Semaphore messages.
 * When Semaphore messages are text they are converted to bigints before
 * the proof is generated (and eventually sent on-chain).
 * This function help devs converting bigint messages to text again.
 * If the original message was not text the output of this
 * function won't probably be human-readable text.
 * @param message The Semaphore message as a bigint.
 * @returns The Semaphore message as a text.
 */
function decodeMessage(message) {
    return decodeBytes32String(toBeHex(message, 32));
}

var deployedContracts = [
	{
		network: "sepolia",
		contracts: [
			{
				name: "SemaphoreVerifier",
				address: "0x58AD7a4389E0F5d814815E5D5A3Ab903dAE9284a",
				startBlock: 5539276
			},
			{
				name: "PoseidonT3",
				address: "0x4EFfF6a6a7BB31cdAd9Ee742b0faAA6Bb9BF096B",
				startBlock: 5539276
			},
			{
				name: "Semaphore",
				address: "0x0A09FB3f63c13F1C54F2fA41AFB1e7a98cffc774",
				startBlock: 5539276
			}
		]
	},
	{
		network: "arbitrum-sepolia",
		contracts: [
			{
				name: "SemaphoreVerifier",
				address: "0x5f4edC58142f4395D1D536e793137A0252dA5a49",
				startBlock: 25837653
			},
			{
				name: "PoseidonT3",
				address: "0x181B7f34538cE3BceC68597d4A212aB3f7881648",
				startBlock: 25837653
			},
			{
				name: "Semaphore",
				address: "0x220fBdB6F996827b1Cf12f0C181E8d5e6de3a36F",
				startBlock: 25837653
			}
		]
	},
	{
		network: "optimism-sepolia",
		contracts: [
			{
				name: "SemaphoreVerifier",
				address: "0x3d3df6CFc6BFf68d9693e097F32bF4a9903E77a5",
				startBlock: 9663266
			},
			{
				name: "PoseidonT3",
				address: "0x5f4edC58142f4395D1D536e793137A0252dA5a49",
				startBlock: 9663266
			},
			{
				name: "Semaphore",
				address: "0x181B7f34538cE3BceC68597d4A212aB3f7881648",
				startBlock: 9663266
			}
		]
	},
	{
		network: "matic-mumbai",
		contracts: [
			{
				name: "SemaphoreVerifier",
				address: "0xE5269ae1E996C6FEEf6E832c7032401E73087568",
				startBlock: 47356015
			},
			{
				name: "PoseidonT3",
				address: "0xC0ae1a8D3505B2bE9DCe0e826abd722Afd13F1c9",
				startBlock: 47356015
			},
			{
				name: "Semaphore",
				address: "0x346a936b19071b2f619200848B8ADbb938D72250",
				startBlock: 47356015
			}
		]
	}
];

var supportedNetworks = {
    sepolia: {
        name: "Sepolia",
        url: "https://rpc2.sepolia.org",
        chainId: 11155111,
        explorer: "https://sepolia.etherscan.io"
    },
    "arbitrum-sepolia": {
        name: "Arbitrum Sepolia",
        url: "https://sepolia-rollup.arbitrum.io/rpc",
        chainId: 421614,
        explorer: "https://sepolia.arbiscan.io"
    },
    "optimism-sepolia": {
        name: "Optimism Sepolia",
        url: "https://sepolia.optimism.io",
        chainId: 11155420,
        explorer: "https://sepolia-optimism.etherscan.io"
    },
    "matic-mumbai": {
        name: "Matic Mumbai",
        url: "https://rpc-mumbai.polygon.technology",
        chainId: 80001,
        explorer: "https://mumbai.polygonscan.com"
    }
};

/**
 * @module Networks
 * This module provides a collection of utility functions to provide the other internal
 * packages and developers with information on deployed contracts and networks supported
 * by Semaphore.
 */
// Default Semaphore network.
const defaultNetwork = "sepolia";
/**
 * Returns true if a network is supported by Semaphore, false otherwise.
 * @param supportedNetwork The network to be checked.
 */
function isSupportedNetwork(supportedNetwork) {
    return Object.keys(supportedNetworks).includes(supportedNetwork);
}
/**
 * Utility function to get an object compatible with the Hardhat 'networks' option.
 * If the private key is not defined it returns an empty object.
 * @param privateKey Private key to be used with networks.
 * @returns An object compatible with the Hardhat 'networks' option.
 */
function getHardhatNetworks(privateKey) {
    if (!privateKey) {
        return {};
    }
    const supportedNetworksCopy = JSON.parse(JSON.stringify(supportedNetworks));
    for (const key in supportedNetworksCopy) {
        if (Object.prototype.hasOwnProperty.call(supportedNetworksCopy, key)) {
            supportedNetworksCopy[key].accounts = [`0x${privateKey}`];
        }
    }
    return supportedNetworksCopy;
}
/**
 * Returns name, address and start block of a Semaphore contract deployed
 * on a specific supported network.
 * @param supportedNetwork The network supported by Semaphore.
 * @returns An object with name, address and start block of the deployed contract.
 */
function getDeployedContract(supportedNetwork) {
    if (!isSupportedNetwork(supportedNetwork)) {
        throw new Error(`Semaphore has not been deployed on '${supportedNetwork}' yet`);
    }
    const deployedContract = deployedContracts.find(({ network }) => network === supportedNetwork);
    return deployedContract.contracts.find(({ name }) => name === "Semaphore");
}

export { constants, decodeMessage, defaultNetwork, deployedContracts, getDeployedContract, getHardhatNetworks, isSupportedNetwork, supportedNetworks };
